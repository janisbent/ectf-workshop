"""
Author: Ben Janis
Date: 2025

This source file is part of an example system for MITRE's 2025 Embedded System CTF
(eCTF). This code is being provided only for educational purposes for the 2025 MITRE
eCTF competition, and may not meet MITRE standards for quality. Use this code at your
own risk!

Copyright: Copyright (c) 2025 The MITRE Corporation
"""

import argparse
import struct
import re
from pathlib import Path
from loguru import logger
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

def load_secrets(bytes_secrets)->bytes:
    """Parses the `global.secrets` file (C header format) and extracts encryption keys.

    Args:
        secrets_path (str): Path to the `global.secrets` file.

    Returns:
        secret_key (bytes): contains master key

    Raises:
        ValueError: If the `secret_key` can't be extracted
    """
    secrets = str(bytes_secrets, 'utf-8')
    # Extract the master secret key
    secret_key_match = re.search(
        r"static const uint8_t secret_key\[16\] = \{\s*((?:0x[0-9A-Fa-f]+,\s*){15}0x[0-9A-Fa-f]+)\s*\}", 
        secrets
    )

    if not secret_key_match:
        raise ValueError("Error: Unable to extract secret_key from secrets file.")

    secret_key = secret_key_match.group(1)
    secret_key = bytes(int(b, 16) for b in secret_key.replace(" ", "").split(","))
    
    return secret_key

def encrypt_data(key: bytes, data: bytes) -> bytes:
    """Encrypt data using AES-128 in ECB mode."""
    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())
    encryptor = cipher.encryptor()
    return encryptor.update(data) + encryptor.finalize()

def add_padding(data: bytes) -> bytes:
    """Add padding to the data to make its length a multiple of 16 bytes."""
    padding_length = 16 - (len(data) % 16)
    return data + (b'\x00' * padding_length)

def gen_subscription(secrets: bytes, device_id: int, start: int, end: int, channel: int) -> bytes:
    """Generate the contents of a subscription.

    The output of this will be passed to the Decoder using ectf25.tv.subscribe

    :param secrets: Contents of the secrets file generated by ectf25_design.gen_secrets
    :param device_id: Device ID of the Decoder
    :param start: First timestamp the subscription is valid for
    :param end: Last timestamp the subscription is valid for
    :param channel: Channel to enable
    """
    key = load_secrets(secrets)
    packet = struct.pack("<IQQI", device_id, start, end, channel)
    packet = add_padding(packet)
    return encrypt_data(key, packet)

def parse_args():
    """Define and parse the command line arguments

    NOTE: Your design must not change this function
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--force",
        "-f",
        action="store_true",
        help="Force creation of subscription file, overwriting existing file",
    )
    parser.add_argument(
        "secrets_file",
        type=argparse.FileType("rb"),
        help="Path to the secrets file created by ectf25_design.gen_secrets",
    )
    parser.add_argument("subscription_file", type=Path, help="Subscription output")
    parser.add_argument(
        "device_id", type=lambda x: int(x, 0), help="Device ID of the update recipient."
    )
    parser.add_argument(
        "start", type=lambda x: int(x, 0), help="Subscription start timestamp"
    )
    parser.add_argument("end", type=int, help="Subscription end timestamp")
    parser.add_argument("channel", type=int, help="Channel to subscribe to")
    return parser.parse_args()


def main():
    """Main function of gen_subscription

    You will likely not have to change this function
    """
    # Parse the command line arguments
    args = parse_args()

    subscription = gen_subscription(
        args.secrets_file.read(), args.device_id, args.start, args.end, args.channel
    )

    # Print the generated subscription for your own debugging
    # Attackers will NOT have access to the output of this (although they may have
    # subscriptions in certain scenarios), but feel free to remove
    #
    # NOTE: Printing sensitive data is generally not good security practice
    logger.debug(f"Generated subscription: {subscription}")

    # Open the file, erroring if the file exists unless the --force arg is provided
    with open(args.subscription_file, "wb" if args.force else "xb") as f:
        f.write(subscription)

    # For your own debugging. Feel free to remove
    logger.success(f"Wrote subscription to {str(args.subscription_file.absolute())}")


if __name__ == "__main__":
    main()
