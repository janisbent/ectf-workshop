MEMORY {
    ROM          (rx) : ORIGIN = 0x00000000, LENGTH = 0x00010000 /* MAX78000 bootloader */
    BOOTLOADER   (rx) : ORIGIN = 0x10000000, LENGTH = 0x0000E000 /* eCTF bootloader */
    FLASH        (rx) : ORIGIN = 0x1000E000, LENGTH = 0x00038000 /* Loaded by bootloader */
    FLASH_NOLOAD (rw) : ORIGIN = 0x10046000, LENGTH = 0x00038000 /* Usable but not loaded */
    ROM_BL_PAGE  (r)  : ORIGIN = 0x1007E000, LENGTH = 0x00002000 /* MAX78000 bootloader reserved */
    SRAM_RX      (rx) : ORIGIN = 0x20000000, LENGTH = 0x00002000 /* 8kB SRAM RX - for .flashprog */
    SRAM_RW      (rw) : ORIGIN = 0x20002000, LENGTH = 0x0001E000 /* 120kB SRAM RW - for data, bss and stack*/
}

SECTIONS {
    .text : {
        /* Place vector table at start of our flash region */
        . = ORIGIN(FLASH);
        KEEP(*(.vectors))

        /* Bootloader jumps to this offset for our entry point */
        . = ORIGIN(FLASH) + 0x200;
        KEEP(*(.crt0))

        /* Symbol Shimmy goes here! */
        $TEXT_SECTIONS

    } > FLASH

    .rodata : {
        *(.rodata .rodata*)
    } > FLASH

    .data : {
        . = ALIGN(4);
        _data_start = .;

        *(.data .data*)

        . = ALIGN(4);
        _data_end = .;
    } > SRAM_RW AT>FLASH
    _data_load = LOADADDR(.data);

    .flashprog : {
        . = ALIGN(4);
        _flashprog_start = .;

        *(.flashprog .flashprog*)

        . = ALIGN(4);
        _flashprog_end = .;
    } > SRAM_RX AT>FLASH
    _flashprog_load = LOADADDR(.flashprog);

    /* Reserved flash page: attack lockout state */
    .lockout_state (ORIGIN(FLASH_NOLOAD) - 0x4000) : {
        lockout_state = .;
        FILL(0)
        . = . + 0x2000;
    }

    /* Reserved flash page: channel 0 (must be last loaded page) */
    .channel0 (ORIGIN(FLASH_NOLOAD) - 0x2000) : {
        channel0 = .;
        . = . + 0x2000;
    } > FLASH

    .bss (NOLOAD) : {
        . = ALIGN(4);
        _bss_start = .;

        *(.bss*)
        *(COMMON)

        . = ALIGN(4);
        _bss_end = .;
    } > SRAM_RW

    /* Top of stack at end of RAM */
    __StackTop = ORIGIN(SRAM_RW) + LENGTH(SRAM_RW);
}
